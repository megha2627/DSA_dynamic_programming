Geek is going for a training program. He can perform any of these activities: Running, Fighting, and Learning Practice. Each activity has some point on each day. As Geek wants to improve all his skills, he can't do the same activity on two consecutive days. Given a 2D array arr[][] where arr[i][0], arr[i][1], and arr[i][2] represent the merit points for Running, Fighting, and Learning on the i-th day, determine the maximum total merit points Geek can achieve 




// User function Template for Java

class Solution {
    public int maximumPoints(int[][] arr, int N) {
        // Memoization array: dp[day][lastActivity]
        int[][] dp = new int[N][4];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }

        // Start recursion with day 0 and no activity done previously (-1)
        return solve(arr, 0, 3, dp, N);
    }

    private int solve(int[][] arr, int day, int lastActivity, int[][] dp, int N) {
        // Base case: If all days are processed, return 0
        if (day == N) {
            return 0;
        }

        // Check memoization table
        if (dp[day][lastActivity] != -1) {
            return dp[day][lastActivity];
        }

        int maxPoints = 0;

        // Explore all activities for the current day
        for (int activity = 0; activity < 3; activity++) {
            // Skip the activity if it was done on the previous day
            if (activity != lastActivity) {
                int points = arr[day][activity] + solve(arr, day + 1, activity, dp, N);
                maxPoints = Math.max(maxPoints, points);
            }
        }

        // Store the result in the memoization table
        dp[day][lastActivity] = maxPoints;

        return maxPoints;
    }
}