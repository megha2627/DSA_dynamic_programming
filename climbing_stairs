You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?


class Solution {
    public int climbStairs(int n) {
        if(n<=0){
            return n;
            
        }
        ArrayList<Integer> s1=new ArrayList<>(Collections.nCopies(n+1,-1));
        return solve(s1,n);
        
    }
    public int solve(ArrayList<Integer> dp,int n){
        if(n<0){
            return 0;
        }
        if(n==0){
            return 1;
        }
        if(dp.get(n)!=-1){
            return dp.get(n);
        }
        int s1=solve(dp,n-1);
        int s2=solve(dp,n-2);
        dp.set(n,(s1+s2));
        return dp.get(n);
    }
}