Given an array arr[] of size n, where arr[i] denotes the height of ith stone. Geek starts from stone 0 and from stone i, he can jump to stones i + 1, i + 2, … i + k. The cost for jumping from stone i to stone j is abs(arr[i] – arr[j]). Find the minimum cost for Geek to reach the last stone.


// User function Template for Java

/*class Solution {
      int result=0;
    Integer[][] dp;
    
    public int minimizeCost(int k, int arr[]) {
       dp=new Integer[arr.length+1][arr.length+1];
       for(Integer[] s:dp){
           Arrays.fill(s,-1);
       }
        return solve(k,arr,0,0);
        // code here
    }
    public int solve(int k,int arr[],int prev,int u){
        if(u>=arr.length){
            return 0;
        }
        if(dp[u][prev]!=-1){
            return dp[u][prev];
        }
      
        for(int i=1;i<=k;i++){
            int take=Math.abs(prev-arr[u])+solve(k,arr,arr[u],i);
           
           dp[u][prev]=result;
             result=Math.min(result,take);
        }
        return result;
    }
}
*/

class Solution {
    public int minimizeCost(int k, int arr[]) {
        // Initialize the DP array for memoization
        int n = arr.length;
        Integer[] dp = new Integer[n];
        return solve(k, arr, 0, dp);
    }

    public int solve(int k, int[] arr, int u, Integer[] dp) {
        // Base case: if we're at the last stone, no cost is required
        if (u == arr.length - 1) {
            return 0;
        }

        // If result already computed, return it
        if (dp[u] != null) {
            return dp[u];
        }

        // Initialize minimum cost to a large value
        int minCost = Integer.MAX_VALUE;

        // Try jumping to every stone within the range [u+1, u+k]
        for (int i = 1; i <= k; i++) {
            if (u + i < arr.length) {
                int cost = Math.abs(arr[u] - arr[u + i]) + solve(k, arr, u + i, dp);
                minCost = Math.min(minCost, cost);
            }
        }

        // Memoize the result and return it
        dp[u] = minCost;
        return dp[u];
    }
}